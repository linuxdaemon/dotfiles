#!/usr/bin/env bash
set -e

fail() {
    echo "$*" >&2
    exit 1
}

_get_script_dir() {
    python3 -c 'import sys;from pathlib import Path;print(Path(sys.argv[1]).resolve().parent)' "$0"
}

SCRIPT_DIR="$(_get_script_dir)"
SCRIPT_NAME="$(basename "$0")"
DOTFILE_REPO="$(git -C "$SCRIPT_DIR" rev-parse --show-toplevel)"
DOTFILE_CONFIG="$HOME/.config/dotfiles/repo_path"

usage() {
    cat <<EOF
usage: $SCRIPT_NAME <command>

Commands:
    setup - Set up dotfiles on the current machine
    update - Update dotfiles
    is-update-available - Check for updates, exiting with 0 (success) if there are any available
EOF
}

install_dotfile() {
    file="$1"
    install_path="$HOME/$file"
    backup_path="$install_path.old"
    source="$DOTFILE_REPO/$file"
    if test -e "$install_path"; then
        dest="$(get_link_target "$install_path")"
        if [ "$dest" = "$source" ]; then
            echo "$file already setup, doing nothing"
            return 0
        fi
        if test -e "$backup_path"; then
            fail "Backup $backup_path already exists?? stopping"
        fi
        mv "$install_path" "$backup_path"
        echo "$install_path already existed, backup saved to $backup_path"
    fi
    ln -s "$source" "$install_path"
    echo "Installed $file"
}

install_omz() {
    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        echo "Installing OhMyZSH"
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    else
        echo "OhMyZSH already installed, skipping"
    fi
}

install_brew() {
    if ! has_cmd brew; then
        echo "Installing homebrew"
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        eval "$(brew shellenv)"
    else
        echo "homebrew already installed, skipping"
    fi
}

install_coreutils_brew() {
    if ! brew --prefix --installed coreutils &>/dev/null; then
        echo "Installing coreutils through brew..."
        brew install coreutils
    fi
}

set_config() {
    local parent
    parent="$(dirname "$DOTFILE_CONFIG")"
    [ -d "$parent" ] || mkdir -p "$parent"
    echo "$DOTFILE_REPO" > "$DOTFILE_CONFIG"
}

do_setup() {
    set_config
    # shellcheck disable=SC1091
    source "$DOTFILE_REPO/lib/common/functions.sh"
    has_cmd zsh && install_omz
    is_mac && install_brew
    is_mac && has_cmd brew && install_coreutils_brew

    echo "Installing dotfiles..."
    has_cmd zsh && install_dotfile .zshrc && install_dotfile .zprofile
    has_cmd git && install_dotfile .gitconfig
    has_cmd vim && install_dotfile .vimrc
    echo "dotfiles installed."
}

do_update() {
    set_config
    git -C "$DOTFILE_REPO" pull --stat
    echo "Updated"
}

check_update() {
    git -C "$DOTFILE_REPO" fetch --all
    ! git -C "$DOTFILE_REPO" diff --quiet '@{u}' >/dev/null
}

if [ $# -lt 1 ]; then
    usage
    exit 0
fi

case "$1" in
    setup)
        do_setup
        ;;
    update)
        do_update
        ;;
    is-update-available)
        check_update
        ;;
    *)
        echo "$SCRIPT_NAME: unknown subcommand '$1'" >&2
        usage >&2
        exit 1
esac
